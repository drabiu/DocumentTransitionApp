//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 14.0.23107.0
// 
namespace DocumentTransitionUniversalApp.TransitionAppWCFSerivce {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PersonFiles", Namespace="http://schemas.datacontract.org/2004/07/SplitDescriptionObjects")]
    public partial class PersonFiles : object, System.ComponentModel.INotifyPropertyChanged {
        
        private byte[] DataField;
        
        private string NameField;
        
        private string PersonField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Person {
            get {
                return this.PersonField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonField, value) != true)) {
                    this.PersonField = value;
                    this.RaisePropertyChanged("Person");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PartsSelectionTreeElement", Namespace="http://schemas.datacontract.org/2004/07/DocumentEditPartsEngine", IsReference=true)]
    public partial class PartsSelectionTreeElement : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PartsSelectionTreeElement> ChildsField;
        
        private string ElementIdField;
        
        private string IdField;
        
        private int IndentField;
        
        private string NameField;
        
        private string OwnerNameField;
        
        private DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PartsSelectionTreeElement ParentField;
        
        private bool SelectedField;
        
        private DocumentTransitionUniversalApp.TransitionAppWCFSerivce.ElementType TypeField;
        
        private bool VisibleField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PartsSelectionTreeElement> Childs {
            get {
                return this.ChildsField;
            }
            set {
                if ((object.ReferenceEquals(this.ChildsField, value) != true)) {
                    this.ChildsField = value;
                    this.RaisePropertyChanged("Childs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ElementId {
            get {
                return this.ElementIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ElementIdField, value) != true)) {
                    this.ElementIdField = value;
                    this.RaisePropertyChanged("ElementId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Indent {
            get {
                return this.IndentField;
            }
            set {
                if ((this.IndentField.Equals(value) != true)) {
                    this.IndentField = value;
                    this.RaisePropertyChanged("Indent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnerName {
            get {
                return this.OwnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerNameField, value) != true)) {
                    this.OwnerNameField = value;
                    this.RaisePropertyChanged("OwnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PartsSelectionTreeElement Parent {
            get {
                return this.ParentField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentField, value) != true)) {
                    this.ParentField = value;
                    this.RaisePropertyChanged("Parent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Selected {
            get {
                return this.SelectedField;
            }
            set {
                if ((this.SelectedField.Equals(value) != true)) {
                    this.SelectedField = value;
                    this.RaisePropertyChanged("Selected");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DocumentTransitionUniversalApp.TransitionAppWCFSerivce.ElementType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Visible {
            get {
                return this.VisibleField;
            }
            set {
                if ((this.VisibleField.Equals(value) != true)) {
                    this.VisibleField = value;
                    this.RaisePropertyChanged("Visible");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ElementType", Namespace="http://schemas.datacontract.org/2004/07/OpenXMLTools.Helpers")]
    public enum ElementType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Paragraph = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BulletList = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NumberedList = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Hyperlink = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Table = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Picture = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sheet = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Column = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Row = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Cell = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Slide = 10,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceResponse", Namespace="http://schemas.datacontract.org/2004/07/DocumentTransitionAppService")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PersonFiles>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PersonFiles))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DocumentTransitionUniversalApp.TransitionAppWCFSerivce.ElementType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PartsSelectionTreeElement>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PartsSelectionTreeElement))]
    public partial class ServiceResponse : object, System.ComponentModel.INotifyPropertyChanged {
        
        private object DataField;
        
        private bool IsErrorField;
        
        private string MessageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsError {
            get {
                return this.IsErrorField;
            }
            set {
                if ((this.IsErrorField.Equals(value) != true)) {
                    this.IsErrorField = value;
                    this.RaisePropertyChanged("IsError");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TransitionAppWCFSerivce.ITransitionAppService")]
    public interface ITransitionAppService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransitionAppService/SplitWord", ReplyAction="http://tempuri.org/ITransitionAppService/SplitWordResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PersonFiles>> SplitWordAsync(string docName, byte[] docxFile, byte[] xmlFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransitionAppService/SplitPresentation", ReplyAction="http://tempuri.org/ITransitionAppService/SplitPresentationResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PersonFiles>> SplitPresentationAsync(string docName, byte[] docFile, byte[] xmlFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransitionAppService/GenerateSplitWord", ReplyAction="http://tempuri.org/ITransitionAppService/GenerateSplitWordResponse")]
        System.Threading.Tasks.Task<byte[]> GenerateSplitWordAsync(string docName, System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PartsSelectionTreeElement> parts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransitionAppService/GenerateSplitPresentation", ReplyAction="http://tempuri.org/ITransitionAppService/GenerateSplitPresentationResponse")]
        System.Threading.Tasks.Task<byte[]> GenerateSplitPresentationAsync(string docName, System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PartsSelectionTreeElement> parts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransitionAppService/GetWordParts", ReplyAction="http://tempuri.org/ITransitionAppService/GetWordPartsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PartsSelectionTreeElement>> GetWordPartsAsync(string docName, byte[] documentFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransitionAppService/GetPresentationParts", ReplyAction="http://tempuri.org/ITransitionAppService/GetPresentationPartsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PartsSelectionTreeElement>> GetPresentationPartsAsync(string preName, byte[] presentationFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransitionAppService/GetWordPartsFromXml", ReplyAction="http://tempuri.org/ITransitionAppService/GetWordPartsFromXmlResponse")]
        System.Threading.Tasks.Task<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.ServiceResponse> GetWordPartsFromXmlAsync(string docName, byte[] documentFile, byte[] splitFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransitionAppService/GetPresentationPartsFromXml", ReplyAction="http://tempuri.org/ITransitionAppService/GetPresentationPartsFromXmlResponse")]
        System.Threading.Tasks.Task<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.ServiceResponse> GetPresentationPartsFromXmlAsync(string docName, byte[] documentFile, byte[] splitFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransitionAppService/SplitExcel", ReplyAction="http://tempuri.org/ITransitionAppService/SplitExcelResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PersonFiles>> SplitExcelAsync(string docName, byte[] docFile, byte[] xmlFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransitionAppService/GenerateSplitExcel", ReplyAction="http://tempuri.org/ITransitionAppService/GenerateSplitExcelResponse")]
        System.Threading.Tasks.Task<byte[]> GenerateSplitExcelAsync(string docName, System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PartsSelectionTreeElement> parts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransitionAppService/GetExcelParts", ReplyAction="http://tempuri.org/ITransitionAppService/GetExcelPartsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PartsSelectionTreeElement>> GetExcelPartsAsync(string excName, byte[] excelFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransitionAppService/GetExcelPartsFromXml", ReplyAction="http://tempuri.org/ITransitionAppService/GetExcelPartsFromXmlResponse")]
        System.Threading.Tasks.Task<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.ServiceResponse> GetExcelPartsFromXmlAsync(string docName, byte[] documentFile, byte[] splitFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransitionAppService/MergeWord", ReplyAction="http://tempuri.org/ITransitionAppService/MergeWordResponse")]
        System.Threading.Tasks.Task<byte[]> MergeWordAsync(System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PersonFiles> files);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransitionAppService/MergePresentation", ReplyAction="http://tempuri.org/ITransitionAppService/MergePresentationResponse")]
        System.Threading.Tasks.Task<byte[]> MergePresentationAsync(System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PersonFiles> files);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransitionAppService/MergeExcel", ReplyAction="http://tempuri.org/ITransitionAppService/MergeExcelResponse")]
        System.Threading.Tasks.Task<byte[]> MergeExcelAsync(System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PersonFiles> files);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITransitionAppServiceChannel : DocumentTransitionUniversalApp.TransitionAppWCFSerivce.ITransitionAppService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TransitionAppServiceClient : System.ServiceModel.ClientBase<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.ITransitionAppService>, DocumentTransitionUniversalApp.TransitionAppWCFSerivce.ITransitionAppService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public TransitionAppServiceClient() : 
                base(TransitionAppServiceClient.GetDefaultBinding(), TransitionAppServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ITransitionAppService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TransitionAppServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(TransitionAppServiceClient.GetBindingForEndpoint(endpointConfiguration), TransitionAppServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TransitionAppServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(TransitionAppServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TransitionAppServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(TransitionAppServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TransitionAppServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PersonFiles>> SplitWordAsync(string docName, byte[] docxFile, byte[] xmlFile) {
            return base.Channel.SplitWordAsync(docName, docxFile, xmlFile);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PersonFiles>> SplitPresentationAsync(string docName, byte[] docFile, byte[] xmlFile) {
            return base.Channel.SplitPresentationAsync(docName, docFile, xmlFile);
        }
        
        public System.Threading.Tasks.Task<byte[]> GenerateSplitWordAsync(string docName, System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PartsSelectionTreeElement> parts) {
            return base.Channel.GenerateSplitWordAsync(docName, parts);
        }
        
        public System.Threading.Tasks.Task<byte[]> GenerateSplitPresentationAsync(string docName, System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PartsSelectionTreeElement> parts) {
            return base.Channel.GenerateSplitPresentationAsync(docName, parts);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PartsSelectionTreeElement>> GetWordPartsAsync(string docName, byte[] documentFile) {
            return base.Channel.GetWordPartsAsync(docName, documentFile);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PartsSelectionTreeElement>> GetPresentationPartsAsync(string preName, byte[] presentationFile) {
            return base.Channel.GetPresentationPartsAsync(preName, presentationFile);
        }
        
        public System.Threading.Tasks.Task<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.ServiceResponse> GetWordPartsFromXmlAsync(string docName, byte[] documentFile, byte[] splitFile) {
            return base.Channel.GetWordPartsFromXmlAsync(docName, documentFile, splitFile);
        }
        
        public System.Threading.Tasks.Task<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.ServiceResponse> GetPresentationPartsFromXmlAsync(string docName, byte[] documentFile, byte[] splitFile) {
            return base.Channel.GetPresentationPartsFromXmlAsync(docName, documentFile, splitFile);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PersonFiles>> SplitExcelAsync(string docName, byte[] docFile, byte[] xmlFile) {
            return base.Channel.SplitExcelAsync(docName, docFile, xmlFile);
        }
        
        public System.Threading.Tasks.Task<byte[]> GenerateSplitExcelAsync(string docName, System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PartsSelectionTreeElement> parts) {
            return base.Channel.GenerateSplitExcelAsync(docName, parts);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PartsSelectionTreeElement>> GetExcelPartsAsync(string excName, byte[] excelFile) {
            return base.Channel.GetExcelPartsAsync(excName, excelFile);
        }
        
        public System.Threading.Tasks.Task<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.ServiceResponse> GetExcelPartsFromXmlAsync(string docName, byte[] documentFile, byte[] splitFile) {
            return base.Channel.GetExcelPartsFromXmlAsync(docName, documentFile, splitFile);
        }
        
        public System.Threading.Tasks.Task<byte[]> MergeWordAsync(System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PersonFiles> files) {
            return base.Channel.MergeWordAsync(files);
        }
        
        public System.Threading.Tasks.Task<byte[]> MergePresentationAsync(System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PersonFiles> files) {
            return base.Channel.MergePresentationAsync(files);
        }
        
        public System.Threading.Tasks.Task<byte[]> MergeExcelAsync(System.Collections.ObjectModel.ObservableCollection<DocumentTransitionUniversalApp.TransitionAppWCFSerivce.PersonFiles> files) {
            return base.Channel.MergeExcelAsync(files);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITransitionAppService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITransitionAppService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost/DocumentTransitionAppWCF/TransitionAppService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return TransitionAppServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ITransitionAppService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return TransitionAppServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ITransitionAppService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_ITransitionAppService,
        }
    }
}
